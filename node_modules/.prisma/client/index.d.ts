
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export interface PrismaPromise<A> extends Promise<A> {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 * 
 */
export type User = {
  id: number
  name: string | null
  email: string
  password: string
  phone_number: string
  createdAt: Date
  updated_at: Date
}

/**
 * Model Gestor
 * 
 */
export type Gestor = {
  id: number
  user_id: number
  createdAt: Date
  updated_at: Date
}

/**
 * Model Credencial_Externa
 * 
 */
export type Credencial_Externa = {
  id: number
  url: string
  name: string
  username_ext: string
  password_ext: string
  createdAt: Date
  updated_at: Date
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Prisma.TransactionClient) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.gestor`: Exposes CRUD operations for the **Gestor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Gestors
    * const gestors = await prisma.gestor.findMany()
    * ```
    */
  get gestor(): Prisma.GestorDelegate<GlobalReject>;

  /**
   * `prisma.credencial_Externa`: Exposes CRUD operations for the **Credencial_Externa** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Credencial_Externas
    * const credencial_Externas = await prisma.credencial_Externa.findMany()
    * ```
    */
  get credencial_Externa(): Prisma.Credencial_ExternaDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.9.0
   * Query Engine version: ceb5c99003b99c9ee2c1d2e618e359c14aef2ea5
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    User: 'User',
    Gestor: 'Gestor',
    Credencial_Externa: 'Credencial_Externa'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    gestors: number
  }

  export type UserCountOutputTypeSelect = {
    gestors?: boolean
  }

  export type UserCountOutputTypeGetPayload<S extends boolean | null | undefined | UserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UserCountOutputTypeArgs)
    ? UserCountOutputType 
    : S extends { select: any } & (UserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
      : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type GestorCountOutputType
   */


  export type GestorCountOutputType = {
    credencial_Externa: number
  }

  export type GestorCountOutputTypeSelect = {
    credencial_Externa?: boolean
  }

  export type GestorCountOutputTypeGetPayload<S extends boolean | null | undefined | GestorCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? GestorCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (GestorCountOutputTypeArgs)
    ? GestorCountOutputType 
    : S extends { select: any } & (GestorCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof GestorCountOutputType ? GestorCountOutputType[P] : never
  } 
      : GestorCountOutputType




  // Custom InputTypes

  /**
   * GestorCountOutputType without action
   */
  export type GestorCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the GestorCountOutputType
     */
    select?: GestorCountOutputTypeSelect | null
  }



  /**
   * Count Type Credencial_ExternaCountOutputType
   */


  export type Credencial_ExternaCountOutputType = {
    gestors: number
  }

  export type Credencial_ExternaCountOutputTypeSelect = {
    gestors?: boolean
  }

  export type Credencial_ExternaCountOutputTypeGetPayload<S extends boolean | null | undefined | Credencial_ExternaCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Credencial_ExternaCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (Credencial_ExternaCountOutputTypeArgs)
    ? Credencial_ExternaCountOutputType 
    : S extends { select: any } & (Credencial_ExternaCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Credencial_ExternaCountOutputType ? Credencial_ExternaCountOutputType[P] : never
  } 
      : Credencial_ExternaCountOutputType




  // Custom InputTypes

  /**
   * Credencial_ExternaCountOutputType without action
   */
  export type Credencial_ExternaCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the Credencial_ExternaCountOutputType
     */
    select?: Credencial_ExternaCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    phone_number: string | null
    createdAt: Date | null
    updated_at: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    phone_number: string | null
    createdAt: Date | null
    updated_at: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    phone_number: number
    createdAt: number
    updated_at: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    phone_number?: true
    createdAt?: true
    updated_at?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    phone_number?: true
    createdAt?: true
    updated_at?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    phone_number?: true
    createdAt?: true
    updated_at?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    name: string | null
    email: string
    password: string
    phone_number: string
    createdAt: Date
    updated_at: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    phone_number?: boolean
    createdAt?: boolean
    updated_at?: boolean
    gestors?: boolean | User$gestorsArgs
    _count?: boolean | UserCountOutputTypeArgs
  }


  export type UserInclude = {
    gestors?: boolean | User$gestorsArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<S extends boolean | null | undefined | UserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? User :
    S extends undefined ? never :
    S extends { include: any } & (UserArgs | UserFindManyArgs)
    ? User  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'gestors' ? Array < GestorGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UserArgs | UserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'gestors' ? Array < GestorGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
      : User


  type UserCountArgs = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): PrismaPromise<Array<UserGetPayload<T>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    gestors<T extends User$gestorsArgs= {}>(args?: Subset<T, User$gestorsArgs>): PrismaPromise<Array<GestorGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.gestors
   */
  export type User$gestorsArgs = {
    /**
     * Select specific fields to fetch from the Gestor
     */
    select?: GestorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GestorInclude | null
    where?: GestorWhereInput
    orderBy?: Enumerable<GestorOrderByWithRelationInput>
    cursor?: GestorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<GestorScalarFieldEnum>
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
  }



  /**
   * Model Gestor
   */


  export type AggregateGestor = {
    _count: GestorCountAggregateOutputType | null
    _avg: GestorAvgAggregateOutputType | null
    _sum: GestorSumAggregateOutputType | null
    _min: GestorMinAggregateOutputType | null
    _max: GestorMaxAggregateOutputType | null
  }

  export type GestorAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type GestorSumAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type GestorMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    createdAt: Date | null
    updated_at: Date | null
  }

  export type GestorMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    createdAt: Date | null
    updated_at: Date | null
  }

  export type GestorCountAggregateOutputType = {
    id: number
    user_id: number
    createdAt: number
    updated_at: number
    _all: number
  }


  export type GestorAvgAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type GestorSumAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type GestorMinAggregateInputType = {
    id?: true
    user_id?: true
    createdAt?: true
    updated_at?: true
  }

  export type GestorMaxAggregateInputType = {
    id?: true
    user_id?: true
    createdAt?: true
    updated_at?: true
  }

  export type GestorCountAggregateInputType = {
    id?: true
    user_id?: true
    createdAt?: true
    updated_at?: true
    _all?: true
  }

  export type GestorAggregateArgs = {
    /**
     * Filter which Gestor to aggregate.
     */
    where?: GestorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Gestors to fetch.
     */
    orderBy?: Enumerable<GestorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GestorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Gestors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Gestors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Gestors
    **/
    _count?: true | GestorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GestorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GestorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GestorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GestorMaxAggregateInputType
  }

  export type GetGestorAggregateType<T extends GestorAggregateArgs> = {
        [P in keyof T & keyof AggregateGestor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGestor[P]>
      : GetScalarType<T[P], AggregateGestor[P]>
  }




  export type GestorGroupByArgs = {
    where?: GestorWhereInput
    orderBy?: Enumerable<GestorOrderByWithAggregationInput>
    by: GestorScalarFieldEnum[]
    having?: GestorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GestorCountAggregateInputType | true
    _avg?: GestorAvgAggregateInputType
    _sum?: GestorSumAggregateInputType
    _min?: GestorMinAggregateInputType
    _max?: GestorMaxAggregateInputType
  }


  export type GestorGroupByOutputType = {
    id: number
    user_id: number
    createdAt: Date
    updated_at: Date
    _count: GestorCountAggregateOutputType | null
    _avg: GestorAvgAggregateOutputType | null
    _sum: GestorSumAggregateOutputType | null
    _min: GestorMinAggregateOutputType | null
    _max: GestorMaxAggregateOutputType | null
  }

  type GetGestorGroupByPayload<T extends GestorGroupByArgs> = PrismaPromise<
    Array<
      PickArray<GestorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GestorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GestorGroupByOutputType[P]>
            : GetScalarType<T[P], GestorGroupByOutputType[P]>
        }
      >
    >


  export type GestorSelect = {
    id?: boolean
    user?: boolean | UserArgs
    user_id?: boolean
    createdAt?: boolean
    updated_at?: boolean
    credencial_Externa?: boolean | Gestor$credencial_ExternaArgs
    _count?: boolean | GestorCountOutputTypeArgs
  }


  export type GestorInclude = {
    user?: boolean | UserArgs
    credencial_Externa?: boolean | Gestor$credencial_ExternaArgs
    _count?: boolean | GestorCountOutputTypeArgs
  }

  export type GestorGetPayload<S extends boolean | null | undefined | GestorArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Gestor :
    S extends undefined ? never :
    S extends { include: any } & (GestorArgs | GestorFindManyArgs)
    ? Gestor  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends 'credencial_Externa' ? Array < Credencial_ExternaGetPayload<S['include'][P]>>  :
        P extends '_count' ? GestorCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (GestorArgs | GestorFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends 'credencial_Externa' ? Array < Credencial_ExternaGetPayload<S['select'][P]>>  :
        P extends '_count' ? GestorCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Gestor ? Gestor[P] : never
  } 
      : Gestor


  type GestorCountArgs = 
    Omit<GestorFindManyArgs, 'select' | 'include'> & {
      select?: GestorCountAggregateInputType | true
    }

  export interface GestorDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Gestor that matches the filter.
     * @param {GestorFindUniqueArgs} args - Arguments to find a Gestor
     * @example
     * // Get one Gestor
     * const gestor = await prisma.gestor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GestorFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, GestorFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Gestor'> extends True ? Prisma__GestorClient<GestorGetPayload<T>> : Prisma__GestorClient<GestorGetPayload<T> | null, null>

    /**
     * Find one Gestor that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {GestorFindUniqueOrThrowArgs} args - Arguments to find a Gestor
     * @example
     * // Get one Gestor
     * const gestor = await prisma.gestor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GestorFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, GestorFindUniqueOrThrowArgs>
    ): Prisma__GestorClient<GestorGetPayload<T>>

    /**
     * Find the first Gestor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GestorFindFirstArgs} args - Arguments to find a Gestor
     * @example
     * // Get one Gestor
     * const gestor = await prisma.gestor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GestorFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, GestorFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Gestor'> extends True ? Prisma__GestorClient<GestorGetPayload<T>> : Prisma__GestorClient<GestorGetPayload<T> | null, null>

    /**
     * Find the first Gestor that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GestorFindFirstOrThrowArgs} args - Arguments to find a Gestor
     * @example
     * // Get one Gestor
     * const gestor = await prisma.gestor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GestorFindFirstOrThrowArgs>(
      args?: SelectSubset<T, GestorFindFirstOrThrowArgs>
    ): Prisma__GestorClient<GestorGetPayload<T>>

    /**
     * Find zero or more Gestors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GestorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Gestors
     * const gestors = await prisma.gestor.findMany()
     * 
     * // Get first 10 Gestors
     * const gestors = await prisma.gestor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gestorWithIdOnly = await prisma.gestor.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GestorFindManyArgs>(
      args?: SelectSubset<T, GestorFindManyArgs>
    ): PrismaPromise<Array<GestorGetPayload<T>>>

    /**
     * Create a Gestor.
     * @param {GestorCreateArgs} args - Arguments to create a Gestor.
     * @example
     * // Create one Gestor
     * const Gestor = await prisma.gestor.create({
     *   data: {
     *     // ... data to create a Gestor
     *   }
     * })
     * 
    **/
    create<T extends GestorCreateArgs>(
      args: SelectSubset<T, GestorCreateArgs>
    ): Prisma__GestorClient<GestorGetPayload<T>>

    /**
     * Create many Gestors.
     *     @param {GestorCreateManyArgs} args - Arguments to create many Gestors.
     *     @example
     *     // Create many Gestors
     *     const gestor = await prisma.gestor.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GestorCreateManyArgs>(
      args?: SelectSubset<T, GestorCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Gestor.
     * @param {GestorDeleteArgs} args - Arguments to delete one Gestor.
     * @example
     * // Delete one Gestor
     * const Gestor = await prisma.gestor.delete({
     *   where: {
     *     // ... filter to delete one Gestor
     *   }
     * })
     * 
    **/
    delete<T extends GestorDeleteArgs>(
      args: SelectSubset<T, GestorDeleteArgs>
    ): Prisma__GestorClient<GestorGetPayload<T>>

    /**
     * Update one Gestor.
     * @param {GestorUpdateArgs} args - Arguments to update one Gestor.
     * @example
     * // Update one Gestor
     * const gestor = await prisma.gestor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GestorUpdateArgs>(
      args: SelectSubset<T, GestorUpdateArgs>
    ): Prisma__GestorClient<GestorGetPayload<T>>

    /**
     * Delete zero or more Gestors.
     * @param {GestorDeleteManyArgs} args - Arguments to filter Gestors to delete.
     * @example
     * // Delete a few Gestors
     * const { count } = await prisma.gestor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GestorDeleteManyArgs>(
      args?: SelectSubset<T, GestorDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Gestors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GestorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Gestors
     * const gestor = await prisma.gestor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GestorUpdateManyArgs>(
      args: SelectSubset<T, GestorUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Gestor.
     * @param {GestorUpsertArgs} args - Arguments to update or create a Gestor.
     * @example
     * // Update or create a Gestor
     * const gestor = await prisma.gestor.upsert({
     *   create: {
     *     // ... data to create a Gestor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Gestor we want to update
     *   }
     * })
    **/
    upsert<T extends GestorUpsertArgs>(
      args: SelectSubset<T, GestorUpsertArgs>
    ): Prisma__GestorClient<GestorGetPayload<T>>

    /**
     * Count the number of Gestors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GestorCountArgs} args - Arguments to filter Gestors to count.
     * @example
     * // Count the number of Gestors
     * const count = await prisma.gestor.count({
     *   where: {
     *     // ... the filter for the Gestors we want to count
     *   }
     * })
    **/
    count<T extends GestorCountArgs>(
      args?: Subset<T, GestorCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GestorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Gestor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GestorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GestorAggregateArgs>(args: Subset<T, GestorAggregateArgs>): PrismaPromise<GetGestorAggregateType<T>>

    /**
     * Group by Gestor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GestorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GestorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GestorGroupByArgs['orderBy'] }
        : { orderBy?: GestorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GestorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGestorGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Gestor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__GestorClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    credencial_Externa<T extends Gestor$credencial_ExternaArgs= {}>(args?: Subset<T, Gestor$credencial_ExternaArgs>): PrismaPromise<Array<Credencial_ExternaGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Gestor base type for findUnique actions
   */
  export type GestorFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Gestor
     */
    select?: GestorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GestorInclude | null
    /**
     * Filter, which Gestor to fetch.
     */
    where: GestorWhereUniqueInput
  }

  /**
   * Gestor findUnique
   */
  export interface GestorFindUniqueArgs extends GestorFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Gestor findUniqueOrThrow
   */
  export type GestorFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Gestor
     */
    select?: GestorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GestorInclude | null
    /**
     * Filter, which Gestor to fetch.
     */
    where: GestorWhereUniqueInput
  }


  /**
   * Gestor base type for findFirst actions
   */
  export type GestorFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Gestor
     */
    select?: GestorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GestorInclude | null
    /**
     * Filter, which Gestor to fetch.
     */
    where?: GestorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Gestors to fetch.
     */
    orderBy?: Enumerable<GestorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Gestors.
     */
    cursor?: GestorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Gestors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Gestors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Gestors.
     */
    distinct?: Enumerable<GestorScalarFieldEnum>
  }

  /**
   * Gestor findFirst
   */
  export interface GestorFindFirstArgs extends GestorFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Gestor findFirstOrThrow
   */
  export type GestorFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Gestor
     */
    select?: GestorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GestorInclude | null
    /**
     * Filter, which Gestor to fetch.
     */
    where?: GestorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Gestors to fetch.
     */
    orderBy?: Enumerable<GestorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Gestors.
     */
    cursor?: GestorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Gestors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Gestors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Gestors.
     */
    distinct?: Enumerable<GestorScalarFieldEnum>
  }


  /**
   * Gestor findMany
   */
  export type GestorFindManyArgs = {
    /**
     * Select specific fields to fetch from the Gestor
     */
    select?: GestorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GestorInclude | null
    /**
     * Filter, which Gestors to fetch.
     */
    where?: GestorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Gestors to fetch.
     */
    orderBy?: Enumerable<GestorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Gestors.
     */
    cursor?: GestorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Gestors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Gestors.
     */
    skip?: number
    distinct?: Enumerable<GestorScalarFieldEnum>
  }


  /**
   * Gestor create
   */
  export type GestorCreateArgs = {
    /**
     * Select specific fields to fetch from the Gestor
     */
    select?: GestorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GestorInclude | null
    /**
     * The data needed to create a Gestor.
     */
    data: XOR<GestorCreateInput, GestorUncheckedCreateInput>
  }


  /**
   * Gestor createMany
   */
  export type GestorCreateManyArgs = {
    /**
     * The data used to create many Gestors.
     */
    data: Enumerable<GestorCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Gestor update
   */
  export type GestorUpdateArgs = {
    /**
     * Select specific fields to fetch from the Gestor
     */
    select?: GestorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GestorInclude | null
    /**
     * The data needed to update a Gestor.
     */
    data: XOR<GestorUpdateInput, GestorUncheckedUpdateInput>
    /**
     * Choose, which Gestor to update.
     */
    where: GestorWhereUniqueInput
  }


  /**
   * Gestor updateMany
   */
  export type GestorUpdateManyArgs = {
    /**
     * The data used to update Gestors.
     */
    data: XOR<GestorUpdateManyMutationInput, GestorUncheckedUpdateManyInput>
    /**
     * Filter which Gestors to update
     */
    where?: GestorWhereInput
  }


  /**
   * Gestor upsert
   */
  export type GestorUpsertArgs = {
    /**
     * Select specific fields to fetch from the Gestor
     */
    select?: GestorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GestorInclude | null
    /**
     * The filter to search for the Gestor to update in case it exists.
     */
    where: GestorWhereUniqueInput
    /**
     * In case the Gestor found by the `where` argument doesn't exist, create a new Gestor with this data.
     */
    create: XOR<GestorCreateInput, GestorUncheckedCreateInput>
    /**
     * In case the Gestor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GestorUpdateInput, GestorUncheckedUpdateInput>
  }


  /**
   * Gestor delete
   */
  export type GestorDeleteArgs = {
    /**
     * Select specific fields to fetch from the Gestor
     */
    select?: GestorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GestorInclude | null
    /**
     * Filter which Gestor to delete.
     */
    where: GestorWhereUniqueInput
  }


  /**
   * Gestor deleteMany
   */
  export type GestorDeleteManyArgs = {
    /**
     * Filter which Gestors to delete
     */
    where?: GestorWhereInput
  }


  /**
   * Gestor.credencial_Externa
   */
  export type Gestor$credencial_ExternaArgs = {
    /**
     * Select specific fields to fetch from the Credencial_Externa
     */
    select?: Credencial_ExternaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Credencial_ExternaInclude | null
    where?: Credencial_ExternaWhereInput
    orderBy?: Enumerable<Credencial_ExternaOrderByWithRelationInput>
    cursor?: Credencial_ExternaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Credencial_ExternaScalarFieldEnum>
  }


  /**
   * Gestor without action
   */
  export type GestorArgs = {
    /**
     * Select specific fields to fetch from the Gestor
     */
    select?: GestorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GestorInclude | null
  }



  /**
   * Model Credencial_Externa
   */


  export type AggregateCredencial_Externa = {
    _count: Credencial_ExternaCountAggregateOutputType | null
    _avg: Credencial_ExternaAvgAggregateOutputType | null
    _sum: Credencial_ExternaSumAggregateOutputType | null
    _min: Credencial_ExternaMinAggregateOutputType | null
    _max: Credencial_ExternaMaxAggregateOutputType | null
  }

  export type Credencial_ExternaAvgAggregateOutputType = {
    id: number | null
  }

  export type Credencial_ExternaSumAggregateOutputType = {
    id: number | null
  }

  export type Credencial_ExternaMinAggregateOutputType = {
    id: number | null
    url: string | null
    name: string | null
    username_ext: string | null
    password_ext: string | null
    createdAt: Date | null
    updated_at: Date | null
  }

  export type Credencial_ExternaMaxAggregateOutputType = {
    id: number | null
    url: string | null
    name: string | null
    username_ext: string | null
    password_ext: string | null
    createdAt: Date | null
    updated_at: Date | null
  }

  export type Credencial_ExternaCountAggregateOutputType = {
    id: number
    url: number
    name: number
    username_ext: number
    password_ext: number
    createdAt: number
    updated_at: number
    _all: number
  }


  export type Credencial_ExternaAvgAggregateInputType = {
    id?: true
  }

  export type Credencial_ExternaSumAggregateInputType = {
    id?: true
  }

  export type Credencial_ExternaMinAggregateInputType = {
    id?: true
    url?: true
    name?: true
    username_ext?: true
    password_ext?: true
    createdAt?: true
    updated_at?: true
  }

  export type Credencial_ExternaMaxAggregateInputType = {
    id?: true
    url?: true
    name?: true
    username_ext?: true
    password_ext?: true
    createdAt?: true
    updated_at?: true
  }

  export type Credencial_ExternaCountAggregateInputType = {
    id?: true
    url?: true
    name?: true
    username_ext?: true
    password_ext?: true
    createdAt?: true
    updated_at?: true
    _all?: true
  }

  export type Credencial_ExternaAggregateArgs = {
    /**
     * Filter which Credencial_Externa to aggregate.
     */
    where?: Credencial_ExternaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Credencial_Externas to fetch.
     */
    orderBy?: Enumerable<Credencial_ExternaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Credencial_ExternaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Credencial_Externas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Credencial_Externas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Credencial_Externas
    **/
    _count?: true | Credencial_ExternaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Credencial_ExternaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Credencial_ExternaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Credencial_ExternaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Credencial_ExternaMaxAggregateInputType
  }

  export type GetCredencial_ExternaAggregateType<T extends Credencial_ExternaAggregateArgs> = {
        [P in keyof T & keyof AggregateCredencial_Externa]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCredencial_Externa[P]>
      : GetScalarType<T[P], AggregateCredencial_Externa[P]>
  }




  export type Credencial_ExternaGroupByArgs = {
    where?: Credencial_ExternaWhereInput
    orderBy?: Enumerable<Credencial_ExternaOrderByWithAggregationInput>
    by: Credencial_ExternaScalarFieldEnum[]
    having?: Credencial_ExternaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Credencial_ExternaCountAggregateInputType | true
    _avg?: Credencial_ExternaAvgAggregateInputType
    _sum?: Credencial_ExternaSumAggregateInputType
    _min?: Credencial_ExternaMinAggregateInputType
    _max?: Credencial_ExternaMaxAggregateInputType
  }


  export type Credencial_ExternaGroupByOutputType = {
    id: number
    url: string
    name: string
    username_ext: string
    password_ext: string
    createdAt: Date
    updated_at: Date
    _count: Credencial_ExternaCountAggregateOutputType | null
    _avg: Credencial_ExternaAvgAggregateOutputType | null
    _sum: Credencial_ExternaSumAggregateOutputType | null
    _min: Credencial_ExternaMinAggregateOutputType | null
    _max: Credencial_ExternaMaxAggregateOutputType | null
  }

  type GetCredencial_ExternaGroupByPayload<T extends Credencial_ExternaGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Credencial_ExternaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Credencial_ExternaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Credencial_ExternaGroupByOutputType[P]>
            : GetScalarType<T[P], Credencial_ExternaGroupByOutputType[P]>
        }
      >
    >


  export type Credencial_ExternaSelect = {
    id?: boolean
    url?: boolean
    name?: boolean
    username_ext?: boolean
    password_ext?: boolean
    createdAt?: boolean
    updated_at?: boolean
    gestors?: boolean | Credencial_Externa$gestorsArgs
    _count?: boolean | Credencial_ExternaCountOutputTypeArgs
  }


  export type Credencial_ExternaInclude = {
    gestors?: boolean | Credencial_Externa$gestorsArgs
    _count?: boolean | Credencial_ExternaCountOutputTypeArgs
  }

  export type Credencial_ExternaGetPayload<S extends boolean | null | undefined | Credencial_ExternaArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Credencial_Externa :
    S extends undefined ? never :
    S extends { include: any } & (Credencial_ExternaArgs | Credencial_ExternaFindManyArgs)
    ? Credencial_Externa  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'gestors' ? Array < GestorGetPayload<S['include'][P]>>  :
        P extends '_count' ? Credencial_ExternaCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (Credencial_ExternaArgs | Credencial_ExternaFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'gestors' ? Array < GestorGetPayload<S['select'][P]>>  :
        P extends '_count' ? Credencial_ExternaCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Credencial_Externa ? Credencial_Externa[P] : never
  } 
      : Credencial_Externa


  type Credencial_ExternaCountArgs = 
    Omit<Credencial_ExternaFindManyArgs, 'select' | 'include'> & {
      select?: Credencial_ExternaCountAggregateInputType | true
    }

  export interface Credencial_ExternaDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Credencial_Externa that matches the filter.
     * @param {Credencial_ExternaFindUniqueArgs} args - Arguments to find a Credencial_Externa
     * @example
     * // Get one Credencial_Externa
     * const credencial_Externa = await prisma.credencial_Externa.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Credencial_ExternaFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, Credencial_ExternaFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Credencial_Externa'> extends True ? Prisma__Credencial_ExternaClient<Credencial_ExternaGetPayload<T>> : Prisma__Credencial_ExternaClient<Credencial_ExternaGetPayload<T> | null, null>

    /**
     * Find one Credencial_Externa that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Credencial_ExternaFindUniqueOrThrowArgs} args - Arguments to find a Credencial_Externa
     * @example
     * // Get one Credencial_Externa
     * const credencial_Externa = await prisma.credencial_Externa.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Credencial_ExternaFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, Credencial_ExternaFindUniqueOrThrowArgs>
    ): Prisma__Credencial_ExternaClient<Credencial_ExternaGetPayload<T>>

    /**
     * Find the first Credencial_Externa that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Credencial_ExternaFindFirstArgs} args - Arguments to find a Credencial_Externa
     * @example
     * // Get one Credencial_Externa
     * const credencial_Externa = await prisma.credencial_Externa.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Credencial_ExternaFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, Credencial_ExternaFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Credencial_Externa'> extends True ? Prisma__Credencial_ExternaClient<Credencial_ExternaGetPayload<T>> : Prisma__Credencial_ExternaClient<Credencial_ExternaGetPayload<T> | null, null>

    /**
     * Find the first Credencial_Externa that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Credencial_ExternaFindFirstOrThrowArgs} args - Arguments to find a Credencial_Externa
     * @example
     * // Get one Credencial_Externa
     * const credencial_Externa = await prisma.credencial_Externa.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Credencial_ExternaFindFirstOrThrowArgs>(
      args?: SelectSubset<T, Credencial_ExternaFindFirstOrThrowArgs>
    ): Prisma__Credencial_ExternaClient<Credencial_ExternaGetPayload<T>>

    /**
     * Find zero or more Credencial_Externas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Credencial_ExternaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Credencial_Externas
     * const credencial_Externas = await prisma.credencial_Externa.findMany()
     * 
     * // Get first 10 Credencial_Externas
     * const credencial_Externas = await prisma.credencial_Externa.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const credencial_ExternaWithIdOnly = await prisma.credencial_Externa.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends Credencial_ExternaFindManyArgs>(
      args?: SelectSubset<T, Credencial_ExternaFindManyArgs>
    ): PrismaPromise<Array<Credencial_ExternaGetPayload<T>>>

    /**
     * Create a Credencial_Externa.
     * @param {Credencial_ExternaCreateArgs} args - Arguments to create a Credencial_Externa.
     * @example
     * // Create one Credencial_Externa
     * const Credencial_Externa = await prisma.credencial_Externa.create({
     *   data: {
     *     // ... data to create a Credencial_Externa
     *   }
     * })
     * 
    **/
    create<T extends Credencial_ExternaCreateArgs>(
      args: SelectSubset<T, Credencial_ExternaCreateArgs>
    ): Prisma__Credencial_ExternaClient<Credencial_ExternaGetPayload<T>>

    /**
     * Create many Credencial_Externas.
     *     @param {Credencial_ExternaCreateManyArgs} args - Arguments to create many Credencial_Externas.
     *     @example
     *     // Create many Credencial_Externas
     *     const credencial_Externa = await prisma.credencial_Externa.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Credencial_ExternaCreateManyArgs>(
      args?: SelectSubset<T, Credencial_ExternaCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Credencial_Externa.
     * @param {Credencial_ExternaDeleteArgs} args - Arguments to delete one Credencial_Externa.
     * @example
     * // Delete one Credencial_Externa
     * const Credencial_Externa = await prisma.credencial_Externa.delete({
     *   where: {
     *     // ... filter to delete one Credencial_Externa
     *   }
     * })
     * 
    **/
    delete<T extends Credencial_ExternaDeleteArgs>(
      args: SelectSubset<T, Credencial_ExternaDeleteArgs>
    ): Prisma__Credencial_ExternaClient<Credencial_ExternaGetPayload<T>>

    /**
     * Update one Credencial_Externa.
     * @param {Credencial_ExternaUpdateArgs} args - Arguments to update one Credencial_Externa.
     * @example
     * // Update one Credencial_Externa
     * const credencial_Externa = await prisma.credencial_Externa.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Credencial_ExternaUpdateArgs>(
      args: SelectSubset<T, Credencial_ExternaUpdateArgs>
    ): Prisma__Credencial_ExternaClient<Credencial_ExternaGetPayload<T>>

    /**
     * Delete zero or more Credencial_Externas.
     * @param {Credencial_ExternaDeleteManyArgs} args - Arguments to filter Credencial_Externas to delete.
     * @example
     * // Delete a few Credencial_Externas
     * const { count } = await prisma.credencial_Externa.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Credencial_ExternaDeleteManyArgs>(
      args?: SelectSubset<T, Credencial_ExternaDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Credencial_Externas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Credencial_ExternaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Credencial_Externas
     * const credencial_Externa = await prisma.credencial_Externa.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Credencial_ExternaUpdateManyArgs>(
      args: SelectSubset<T, Credencial_ExternaUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Credencial_Externa.
     * @param {Credencial_ExternaUpsertArgs} args - Arguments to update or create a Credencial_Externa.
     * @example
     * // Update or create a Credencial_Externa
     * const credencial_Externa = await prisma.credencial_Externa.upsert({
     *   create: {
     *     // ... data to create a Credencial_Externa
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Credencial_Externa we want to update
     *   }
     * })
    **/
    upsert<T extends Credencial_ExternaUpsertArgs>(
      args: SelectSubset<T, Credencial_ExternaUpsertArgs>
    ): Prisma__Credencial_ExternaClient<Credencial_ExternaGetPayload<T>>

    /**
     * Count the number of Credencial_Externas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Credencial_ExternaCountArgs} args - Arguments to filter Credencial_Externas to count.
     * @example
     * // Count the number of Credencial_Externas
     * const count = await prisma.credencial_Externa.count({
     *   where: {
     *     // ... the filter for the Credencial_Externas we want to count
     *   }
     * })
    **/
    count<T extends Credencial_ExternaCountArgs>(
      args?: Subset<T, Credencial_ExternaCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Credencial_ExternaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Credencial_Externa.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Credencial_ExternaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Credencial_ExternaAggregateArgs>(args: Subset<T, Credencial_ExternaAggregateArgs>): PrismaPromise<GetCredencial_ExternaAggregateType<T>>

    /**
     * Group by Credencial_Externa.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Credencial_ExternaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Credencial_ExternaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Credencial_ExternaGroupByArgs['orderBy'] }
        : { orderBy?: Credencial_ExternaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Credencial_ExternaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCredencial_ExternaGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Credencial_Externa.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__Credencial_ExternaClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    gestors<T extends Credencial_Externa$gestorsArgs= {}>(args?: Subset<T, Credencial_Externa$gestorsArgs>): PrismaPromise<Array<GestorGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Credencial_Externa base type for findUnique actions
   */
  export type Credencial_ExternaFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Credencial_Externa
     */
    select?: Credencial_ExternaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Credencial_ExternaInclude | null
    /**
     * Filter, which Credencial_Externa to fetch.
     */
    where: Credencial_ExternaWhereUniqueInput
  }

  /**
   * Credencial_Externa findUnique
   */
  export interface Credencial_ExternaFindUniqueArgs extends Credencial_ExternaFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Credencial_Externa findUniqueOrThrow
   */
  export type Credencial_ExternaFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Credencial_Externa
     */
    select?: Credencial_ExternaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Credencial_ExternaInclude | null
    /**
     * Filter, which Credencial_Externa to fetch.
     */
    where: Credencial_ExternaWhereUniqueInput
  }


  /**
   * Credencial_Externa base type for findFirst actions
   */
  export type Credencial_ExternaFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Credencial_Externa
     */
    select?: Credencial_ExternaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Credencial_ExternaInclude | null
    /**
     * Filter, which Credencial_Externa to fetch.
     */
    where?: Credencial_ExternaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Credencial_Externas to fetch.
     */
    orderBy?: Enumerable<Credencial_ExternaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Credencial_Externas.
     */
    cursor?: Credencial_ExternaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Credencial_Externas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Credencial_Externas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Credencial_Externas.
     */
    distinct?: Enumerable<Credencial_ExternaScalarFieldEnum>
  }

  /**
   * Credencial_Externa findFirst
   */
  export interface Credencial_ExternaFindFirstArgs extends Credencial_ExternaFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Credencial_Externa findFirstOrThrow
   */
  export type Credencial_ExternaFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Credencial_Externa
     */
    select?: Credencial_ExternaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Credencial_ExternaInclude | null
    /**
     * Filter, which Credencial_Externa to fetch.
     */
    where?: Credencial_ExternaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Credencial_Externas to fetch.
     */
    orderBy?: Enumerable<Credencial_ExternaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Credencial_Externas.
     */
    cursor?: Credencial_ExternaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Credencial_Externas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Credencial_Externas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Credencial_Externas.
     */
    distinct?: Enumerable<Credencial_ExternaScalarFieldEnum>
  }


  /**
   * Credencial_Externa findMany
   */
  export type Credencial_ExternaFindManyArgs = {
    /**
     * Select specific fields to fetch from the Credencial_Externa
     */
    select?: Credencial_ExternaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Credencial_ExternaInclude | null
    /**
     * Filter, which Credencial_Externas to fetch.
     */
    where?: Credencial_ExternaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Credencial_Externas to fetch.
     */
    orderBy?: Enumerable<Credencial_ExternaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Credencial_Externas.
     */
    cursor?: Credencial_ExternaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Credencial_Externas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Credencial_Externas.
     */
    skip?: number
    distinct?: Enumerable<Credencial_ExternaScalarFieldEnum>
  }


  /**
   * Credencial_Externa create
   */
  export type Credencial_ExternaCreateArgs = {
    /**
     * Select specific fields to fetch from the Credencial_Externa
     */
    select?: Credencial_ExternaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Credencial_ExternaInclude | null
    /**
     * The data needed to create a Credencial_Externa.
     */
    data: XOR<Credencial_ExternaCreateInput, Credencial_ExternaUncheckedCreateInput>
  }


  /**
   * Credencial_Externa createMany
   */
  export type Credencial_ExternaCreateManyArgs = {
    /**
     * The data used to create many Credencial_Externas.
     */
    data: Enumerable<Credencial_ExternaCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Credencial_Externa update
   */
  export type Credencial_ExternaUpdateArgs = {
    /**
     * Select specific fields to fetch from the Credencial_Externa
     */
    select?: Credencial_ExternaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Credencial_ExternaInclude | null
    /**
     * The data needed to update a Credencial_Externa.
     */
    data: XOR<Credencial_ExternaUpdateInput, Credencial_ExternaUncheckedUpdateInput>
    /**
     * Choose, which Credencial_Externa to update.
     */
    where: Credencial_ExternaWhereUniqueInput
  }


  /**
   * Credencial_Externa updateMany
   */
  export type Credencial_ExternaUpdateManyArgs = {
    /**
     * The data used to update Credencial_Externas.
     */
    data: XOR<Credencial_ExternaUpdateManyMutationInput, Credencial_ExternaUncheckedUpdateManyInput>
    /**
     * Filter which Credencial_Externas to update
     */
    where?: Credencial_ExternaWhereInput
  }


  /**
   * Credencial_Externa upsert
   */
  export type Credencial_ExternaUpsertArgs = {
    /**
     * Select specific fields to fetch from the Credencial_Externa
     */
    select?: Credencial_ExternaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Credencial_ExternaInclude | null
    /**
     * The filter to search for the Credencial_Externa to update in case it exists.
     */
    where: Credencial_ExternaWhereUniqueInput
    /**
     * In case the Credencial_Externa found by the `where` argument doesn't exist, create a new Credencial_Externa with this data.
     */
    create: XOR<Credencial_ExternaCreateInput, Credencial_ExternaUncheckedCreateInput>
    /**
     * In case the Credencial_Externa was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Credencial_ExternaUpdateInput, Credencial_ExternaUncheckedUpdateInput>
  }


  /**
   * Credencial_Externa delete
   */
  export type Credencial_ExternaDeleteArgs = {
    /**
     * Select specific fields to fetch from the Credencial_Externa
     */
    select?: Credencial_ExternaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Credencial_ExternaInclude | null
    /**
     * Filter which Credencial_Externa to delete.
     */
    where: Credencial_ExternaWhereUniqueInput
  }


  /**
   * Credencial_Externa deleteMany
   */
  export type Credencial_ExternaDeleteManyArgs = {
    /**
     * Filter which Credencial_Externas to delete
     */
    where?: Credencial_ExternaWhereInput
  }


  /**
   * Credencial_Externa.gestors
   */
  export type Credencial_Externa$gestorsArgs = {
    /**
     * Select specific fields to fetch from the Gestor
     */
    select?: GestorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GestorInclude | null
    where?: GestorWhereInput
    orderBy?: Enumerable<GestorOrderByWithRelationInput>
    cursor?: GestorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<GestorScalarFieldEnum>
  }


  /**
   * Credencial_Externa without action
   */
  export type Credencial_ExternaArgs = {
    /**
     * Select specific fields to fetch from the Credencial_Externa
     */
    select?: Credencial_ExternaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Credencial_ExternaInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const Credencial_ExternaScalarFieldEnum: {
    id: 'id',
    url: 'url',
    name: 'name',
    username_ext: 'username_ext',
    password_ext: 'password_ext',
    createdAt: 'createdAt',
    updated_at: 'updated_at'
  };

  export type Credencial_ExternaScalarFieldEnum = (typeof Credencial_ExternaScalarFieldEnum)[keyof typeof Credencial_ExternaScalarFieldEnum]


  export const GestorScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    createdAt: 'createdAt',
    updated_at: 'updated_at'
  };

  export type GestorScalarFieldEnum = (typeof GestorScalarFieldEnum)[keyof typeof GestorScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    phone_number: 'phone_number',
    createdAt: 'createdAt',
    updated_at: 'updated_at'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    name?: StringNullableFilter | string | null
    email?: StringFilter | string
    password?: StringFilter | string
    phone_number?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    gestors?: GestorListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone_number?: SortOrder
    createdAt?: SortOrder
    updated_at?: SortOrder
    gestors?: GestorOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone_number?: SortOrder
    createdAt?: SortOrder
    updated_at?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringNullableWithAggregatesFilter | string | null
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    phone_number?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updated_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type GestorWhereInput = {
    AND?: Enumerable<GestorWhereInput>
    OR?: Enumerable<GestorWhereInput>
    NOT?: Enumerable<GestorWhereInput>
    id?: IntFilter | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    user_id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    credencial_Externa?: Credencial_ExternaListRelationFilter
  }

  export type GestorOrderByWithRelationInput = {
    id?: SortOrder
    user?: UserOrderByWithRelationInput
    user_id?: SortOrder
    createdAt?: SortOrder
    updated_at?: SortOrder
    credencial_Externa?: Credencial_ExternaOrderByRelationAggregateInput
  }

  export type GestorWhereUniqueInput = {
    id?: number
  }

  export type GestorOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    createdAt?: SortOrder
    updated_at?: SortOrder
    _count?: GestorCountOrderByAggregateInput
    _avg?: GestorAvgOrderByAggregateInput
    _max?: GestorMaxOrderByAggregateInput
    _min?: GestorMinOrderByAggregateInput
    _sum?: GestorSumOrderByAggregateInput
  }

  export type GestorScalarWhereWithAggregatesInput = {
    AND?: Enumerable<GestorScalarWhereWithAggregatesInput>
    OR?: Enumerable<GestorScalarWhereWithAggregatesInput>
    NOT?: Enumerable<GestorScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    user_id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updated_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type Credencial_ExternaWhereInput = {
    AND?: Enumerable<Credencial_ExternaWhereInput>
    OR?: Enumerable<Credencial_ExternaWhereInput>
    NOT?: Enumerable<Credencial_ExternaWhereInput>
    id?: IntFilter | number
    url?: StringFilter | string
    name?: StringFilter | string
    username_ext?: StringFilter | string
    password_ext?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    gestors?: GestorListRelationFilter
  }

  export type Credencial_ExternaOrderByWithRelationInput = {
    id?: SortOrder
    url?: SortOrder
    name?: SortOrder
    username_ext?: SortOrder
    password_ext?: SortOrder
    createdAt?: SortOrder
    updated_at?: SortOrder
    gestors?: GestorOrderByRelationAggregateInput
  }

  export type Credencial_ExternaWhereUniqueInput = {
    id?: number
  }

  export type Credencial_ExternaOrderByWithAggregationInput = {
    id?: SortOrder
    url?: SortOrder
    name?: SortOrder
    username_ext?: SortOrder
    password_ext?: SortOrder
    createdAt?: SortOrder
    updated_at?: SortOrder
    _count?: Credencial_ExternaCountOrderByAggregateInput
    _avg?: Credencial_ExternaAvgOrderByAggregateInput
    _max?: Credencial_ExternaMaxOrderByAggregateInput
    _min?: Credencial_ExternaMinOrderByAggregateInput
    _sum?: Credencial_ExternaSumOrderByAggregateInput
  }

  export type Credencial_ExternaScalarWhereWithAggregatesInput = {
    AND?: Enumerable<Credencial_ExternaScalarWhereWithAggregatesInput>
    OR?: Enumerable<Credencial_ExternaScalarWhereWithAggregatesInput>
    NOT?: Enumerable<Credencial_ExternaScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    url?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    username_ext?: StringWithAggregatesFilter | string
    password_ext?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updated_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type UserCreateInput = {
    name?: string | null
    email: string
    password: string
    phone_number: string
    createdAt?: Date | string
    updated_at?: Date | string
    gestors?: GestorCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    name?: string | null
    email: string
    password: string
    phone_number: string
    createdAt?: Date | string
    updated_at?: Date | string
    gestors?: GestorUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    gestors?: GestorUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    gestors?: GestorUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    name?: string | null
    email: string
    password: string
    phone_number: string
    createdAt?: Date | string
    updated_at?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GestorCreateInput = {
    user: UserCreateNestedOneWithoutGestorsInput
    createdAt?: Date | string
    updated_at?: Date | string
    credencial_Externa?: Credencial_ExternaCreateNestedManyWithoutGestorsInput
  }

  export type GestorUncheckedCreateInput = {
    id?: number
    user_id: number
    createdAt?: Date | string
    updated_at?: Date | string
    credencial_Externa?: Credencial_ExternaUncheckedCreateNestedManyWithoutGestorsInput
  }

  export type GestorUpdateInput = {
    user?: UserUpdateOneRequiredWithoutGestorsNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    credencial_Externa?: Credencial_ExternaUpdateManyWithoutGestorsNestedInput
  }

  export type GestorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    credencial_Externa?: Credencial_ExternaUncheckedUpdateManyWithoutGestorsNestedInput
  }

  export type GestorCreateManyInput = {
    id?: number
    user_id: number
    createdAt?: Date | string
    updated_at?: Date | string
  }

  export type GestorUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GestorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Credencial_ExternaCreateInput = {
    url: string
    name: string
    username_ext: string
    password_ext: string
    createdAt?: Date | string
    updated_at?: Date | string
    gestors?: GestorCreateNestedManyWithoutCredencial_ExternaInput
  }

  export type Credencial_ExternaUncheckedCreateInput = {
    id?: number
    url: string
    name: string
    username_ext: string
    password_ext: string
    createdAt?: Date | string
    updated_at?: Date | string
    gestors?: GestorUncheckedCreateNestedManyWithoutCredencial_ExternaInput
  }

  export type Credencial_ExternaUpdateInput = {
    url?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username_ext?: StringFieldUpdateOperationsInput | string
    password_ext?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    gestors?: GestorUpdateManyWithoutCredencial_ExternaNestedInput
  }

  export type Credencial_ExternaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username_ext?: StringFieldUpdateOperationsInput | string
    password_ext?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    gestors?: GestorUncheckedUpdateManyWithoutCredencial_ExternaNestedInput
  }

  export type Credencial_ExternaCreateManyInput = {
    id?: number
    url: string
    name: string
    username_ext: string
    password_ext: string
    createdAt?: Date | string
    updated_at?: Date | string
  }

  export type Credencial_ExternaUpdateManyMutationInput = {
    url?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username_ext?: StringFieldUpdateOperationsInput | string
    password_ext?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Credencial_ExternaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username_ext?: StringFieldUpdateOperationsInput | string
    password_ext?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type GestorListRelationFilter = {
    every?: GestorWhereInput
    some?: GestorWhereInput
    none?: GestorWhereInput
  }

  export type GestorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone_number?: SortOrder
    createdAt?: SortOrder
    updated_at?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone_number?: SortOrder
    createdAt?: SortOrder
    updated_at?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone_number?: SortOrder
    createdAt?: SortOrder
    updated_at?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type Credencial_ExternaListRelationFilter = {
    every?: Credencial_ExternaWhereInput
    some?: Credencial_ExternaWhereInput
    none?: Credencial_ExternaWhereInput
  }

  export type Credencial_ExternaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GestorCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    createdAt?: SortOrder
    updated_at?: SortOrder
  }

  export type GestorAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type GestorMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    createdAt?: SortOrder
    updated_at?: SortOrder
  }

  export type GestorMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    createdAt?: SortOrder
    updated_at?: SortOrder
  }

  export type GestorSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type Credencial_ExternaCountOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    name?: SortOrder
    username_ext?: SortOrder
    password_ext?: SortOrder
    createdAt?: SortOrder
    updated_at?: SortOrder
  }

  export type Credencial_ExternaAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type Credencial_ExternaMaxOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    name?: SortOrder
    username_ext?: SortOrder
    password_ext?: SortOrder
    createdAt?: SortOrder
    updated_at?: SortOrder
  }

  export type Credencial_ExternaMinOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    name?: SortOrder
    username_ext?: SortOrder
    password_ext?: SortOrder
    createdAt?: SortOrder
    updated_at?: SortOrder
  }

  export type Credencial_ExternaSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type GestorCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<GestorCreateWithoutUserInput>, Enumerable<GestorUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<GestorCreateOrConnectWithoutUserInput>
    createMany?: GestorCreateManyUserInputEnvelope
    connect?: Enumerable<GestorWhereUniqueInput>
  }

  export type GestorUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<GestorCreateWithoutUserInput>, Enumerable<GestorUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<GestorCreateOrConnectWithoutUserInput>
    createMany?: GestorCreateManyUserInputEnvelope
    connect?: Enumerable<GestorWhereUniqueInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type GestorUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<GestorCreateWithoutUserInput>, Enumerable<GestorUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<GestorCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<GestorUpsertWithWhereUniqueWithoutUserInput>
    createMany?: GestorCreateManyUserInputEnvelope
    set?: Enumerable<GestorWhereUniqueInput>
    disconnect?: Enumerable<GestorWhereUniqueInput>
    delete?: Enumerable<GestorWhereUniqueInput>
    connect?: Enumerable<GestorWhereUniqueInput>
    update?: Enumerable<GestorUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<GestorUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<GestorScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type GestorUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<GestorCreateWithoutUserInput>, Enumerable<GestorUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<GestorCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<GestorUpsertWithWhereUniqueWithoutUserInput>
    createMany?: GestorCreateManyUserInputEnvelope
    set?: Enumerable<GestorWhereUniqueInput>
    disconnect?: Enumerable<GestorWhereUniqueInput>
    delete?: Enumerable<GestorWhereUniqueInput>
    connect?: Enumerable<GestorWhereUniqueInput>
    update?: Enumerable<GestorUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<GestorUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<GestorScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutGestorsInput = {
    create?: XOR<UserCreateWithoutGestorsInput, UserUncheckedCreateWithoutGestorsInput>
    connectOrCreate?: UserCreateOrConnectWithoutGestorsInput
    connect?: UserWhereUniqueInput
  }

  export type Credencial_ExternaCreateNestedManyWithoutGestorsInput = {
    create?: XOR<Enumerable<Credencial_ExternaCreateWithoutGestorsInput>, Enumerable<Credencial_ExternaUncheckedCreateWithoutGestorsInput>>
    connectOrCreate?: Enumerable<Credencial_ExternaCreateOrConnectWithoutGestorsInput>
    connect?: Enumerable<Credencial_ExternaWhereUniqueInput>
  }

  export type Credencial_ExternaUncheckedCreateNestedManyWithoutGestorsInput = {
    create?: XOR<Enumerable<Credencial_ExternaCreateWithoutGestorsInput>, Enumerable<Credencial_ExternaUncheckedCreateWithoutGestorsInput>>
    connectOrCreate?: Enumerable<Credencial_ExternaCreateOrConnectWithoutGestorsInput>
    connect?: Enumerable<Credencial_ExternaWhereUniqueInput>
  }

  export type UserUpdateOneRequiredWithoutGestorsNestedInput = {
    create?: XOR<UserCreateWithoutGestorsInput, UserUncheckedCreateWithoutGestorsInput>
    connectOrCreate?: UserCreateOrConnectWithoutGestorsInput
    upsert?: UserUpsertWithoutGestorsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutGestorsInput, UserUncheckedUpdateWithoutGestorsInput>
  }

  export type Credencial_ExternaUpdateManyWithoutGestorsNestedInput = {
    create?: XOR<Enumerable<Credencial_ExternaCreateWithoutGestorsInput>, Enumerable<Credencial_ExternaUncheckedCreateWithoutGestorsInput>>
    connectOrCreate?: Enumerable<Credencial_ExternaCreateOrConnectWithoutGestorsInput>
    upsert?: Enumerable<Credencial_ExternaUpsertWithWhereUniqueWithoutGestorsInput>
    set?: Enumerable<Credencial_ExternaWhereUniqueInput>
    disconnect?: Enumerable<Credencial_ExternaWhereUniqueInput>
    delete?: Enumerable<Credencial_ExternaWhereUniqueInput>
    connect?: Enumerable<Credencial_ExternaWhereUniqueInput>
    update?: Enumerable<Credencial_ExternaUpdateWithWhereUniqueWithoutGestorsInput>
    updateMany?: Enumerable<Credencial_ExternaUpdateManyWithWhereWithoutGestorsInput>
    deleteMany?: Enumerable<Credencial_ExternaScalarWhereInput>
  }

  export type Credencial_ExternaUncheckedUpdateManyWithoutGestorsNestedInput = {
    create?: XOR<Enumerable<Credencial_ExternaCreateWithoutGestorsInput>, Enumerable<Credencial_ExternaUncheckedCreateWithoutGestorsInput>>
    connectOrCreate?: Enumerable<Credencial_ExternaCreateOrConnectWithoutGestorsInput>
    upsert?: Enumerable<Credencial_ExternaUpsertWithWhereUniqueWithoutGestorsInput>
    set?: Enumerable<Credencial_ExternaWhereUniqueInput>
    disconnect?: Enumerable<Credencial_ExternaWhereUniqueInput>
    delete?: Enumerable<Credencial_ExternaWhereUniqueInput>
    connect?: Enumerable<Credencial_ExternaWhereUniqueInput>
    update?: Enumerable<Credencial_ExternaUpdateWithWhereUniqueWithoutGestorsInput>
    updateMany?: Enumerable<Credencial_ExternaUpdateManyWithWhereWithoutGestorsInput>
    deleteMany?: Enumerable<Credencial_ExternaScalarWhereInput>
  }

  export type GestorCreateNestedManyWithoutCredencial_ExternaInput = {
    create?: XOR<Enumerable<GestorCreateWithoutCredencial_ExternaInput>, Enumerable<GestorUncheckedCreateWithoutCredencial_ExternaInput>>
    connectOrCreate?: Enumerable<GestorCreateOrConnectWithoutCredencial_ExternaInput>
    connect?: Enumerable<GestorWhereUniqueInput>
  }

  export type GestorUncheckedCreateNestedManyWithoutCredencial_ExternaInput = {
    create?: XOR<Enumerable<GestorCreateWithoutCredencial_ExternaInput>, Enumerable<GestorUncheckedCreateWithoutCredencial_ExternaInput>>
    connectOrCreate?: Enumerable<GestorCreateOrConnectWithoutCredencial_ExternaInput>
    connect?: Enumerable<GestorWhereUniqueInput>
  }

  export type GestorUpdateManyWithoutCredencial_ExternaNestedInput = {
    create?: XOR<Enumerable<GestorCreateWithoutCredencial_ExternaInput>, Enumerable<GestorUncheckedCreateWithoutCredencial_ExternaInput>>
    connectOrCreate?: Enumerable<GestorCreateOrConnectWithoutCredencial_ExternaInput>
    upsert?: Enumerable<GestorUpsertWithWhereUniqueWithoutCredencial_ExternaInput>
    set?: Enumerable<GestorWhereUniqueInput>
    disconnect?: Enumerable<GestorWhereUniqueInput>
    delete?: Enumerable<GestorWhereUniqueInput>
    connect?: Enumerable<GestorWhereUniqueInput>
    update?: Enumerable<GestorUpdateWithWhereUniqueWithoutCredencial_ExternaInput>
    updateMany?: Enumerable<GestorUpdateManyWithWhereWithoutCredencial_ExternaInput>
    deleteMany?: Enumerable<GestorScalarWhereInput>
  }

  export type GestorUncheckedUpdateManyWithoutCredencial_ExternaNestedInput = {
    create?: XOR<Enumerable<GestorCreateWithoutCredencial_ExternaInput>, Enumerable<GestorUncheckedCreateWithoutCredencial_ExternaInput>>
    connectOrCreate?: Enumerable<GestorCreateOrConnectWithoutCredencial_ExternaInput>
    upsert?: Enumerable<GestorUpsertWithWhereUniqueWithoutCredencial_ExternaInput>
    set?: Enumerable<GestorWhereUniqueInput>
    disconnect?: Enumerable<GestorWhereUniqueInput>
    delete?: Enumerable<GestorWhereUniqueInput>
    connect?: Enumerable<GestorWhereUniqueInput>
    update?: Enumerable<GestorUpdateWithWhereUniqueWithoutCredencial_ExternaInput>
    updateMany?: Enumerable<GestorUpdateManyWithWhereWithoutCredencial_ExternaInput>
    deleteMany?: Enumerable<GestorScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type GestorCreateWithoutUserInput = {
    createdAt?: Date | string
    updated_at?: Date | string
    credencial_Externa?: Credencial_ExternaCreateNestedManyWithoutGestorsInput
  }

  export type GestorUncheckedCreateWithoutUserInput = {
    id?: number
    createdAt?: Date | string
    updated_at?: Date | string
    credencial_Externa?: Credencial_ExternaUncheckedCreateNestedManyWithoutGestorsInput
  }

  export type GestorCreateOrConnectWithoutUserInput = {
    where: GestorWhereUniqueInput
    create: XOR<GestorCreateWithoutUserInput, GestorUncheckedCreateWithoutUserInput>
  }

  export type GestorCreateManyUserInputEnvelope = {
    data: Enumerable<GestorCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type GestorUpsertWithWhereUniqueWithoutUserInput = {
    where: GestorWhereUniqueInput
    update: XOR<GestorUpdateWithoutUserInput, GestorUncheckedUpdateWithoutUserInput>
    create: XOR<GestorCreateWithoutUserInput, GestorUncheckedCreateWithoutUserInput>
  }

  export type GestorUpdateWithWhereUniqueWithoutUserInput = {
    where: GestorWhereUniqueInput
    data: XOR<GestorUpdateWithoutUserInput, GestorUncheckedUpdateWithoutUserInput>
  }

  export type GestorUpdateManyWithWhereWithoutUserInput = {
    where: GestorScalarWhereInput
    data: XOR<GestorUpdateManyMutationInput, GestorUncheckedUpdateManyWithoutGestorsInput>
  }

  export type GestorScalarWhereInput = {
    AND?: Enumerable<GestorScalarWhereInput>
    OR?: Enumerable<GestorScalarWhereInput>
    NOT?: Enumerable<GestorScalarWhereInput>
    id?: IntFilter | number
    user_id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
  }

  export type UserCreateWithoutGestorsInput = {
    name?: string | null
    email: string
    password: string
    phone_number: string
    createdAt?: Date | string
    updated_at?: Date | string
  }

  export type UserUncheckedCreateWithoutGestorsInput = {
    id?: number
    name?: string | null
    email: string
    password: string
    phone_number: string
    createdAt?: Date | string
    updated_at?: Date | string
  }

  export type UserCreateOrConnectWithoutGestorsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGestorsInput, UserUncheckedCreateWithoutGestorsInput>
  }

  export type Credencial_ExternaCreateWithoutGestorsInput = {
    url: string
    name: string
    username_ext: string
    password_ext: string
    createdAt?: Date | string
    updated_at?: Date | string
  }

  export type Credencial_ExternaUncheckedCreateWithoutGestorsInput = {
    id?: number
    url: string
    name: string
    username_ext: string
    password_ext: string
    createdAt?: Date | string
    updated_at?: Date | string
  }

  export type Credencial_ExternaCreateOrConnectWithoutGestorsInput = {
    where: Credencial_ExternaWhereUniqueInput
    create: XOR<Credencial_ExternaCreateWithoutGestorsInput, Credencial_ExternaUncheckedCreateWithoutGestorsInput>
  }

  export type UserUpsertWithoutGestorsInput = {
    update: XOR<UserUpdateWithoutGestorsInput, UserUncheckedUpdateWithoutGestorsInput>
    create: XOR<UserCreateWithoutGestorsInput, UserUncheckedCreateWithoutGestorsInput>
  }

  export type UserUpdateWithoutGestorsInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutGestorsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Credencial_ExternaUpsertWithWhereUniqueWithoutGestorsInput = {
    where: Credencial_ExternaWhereUniqueInput
    update: XOR<Credencial_ExternaUpdateWithoutGestorsInput, Credencial_ExternaUncheckedUpdateWithoutGestorsInput>
    create: XOR<Credencial_ExternaCreateWithoutGestorsInput, Credencial_ExternaUncheckedCreateWithoutGestorsInput>
  }

  export type Credencial_ExternaUpdateWithWhereUniqueWithoutGestorsInput = {
    where: Credencial_ExternaWhereUniqueInput
    data: XOR<Credencial_ExternaUpdateWithoutGestorsInput, Credencial_ExternaUncheckedUpdateWithoutGestorsInput>
  }

  export type Credencial_ExternaUpdateManyWithWhereWithoutGestorsInput = {
    where: Credencial_ExternaScalarWhereInput
    data: XOR<Credencial_ExternaUpdateManyMutationInput, Credencial_ExternaUncheckedUpdateManyWithoutCredencial_ExternaInput>
  }

  export type Credencial_ExternaScalarWhereInput = {
    AND?: Enumerable<Credencial_ExternaScalarWhereInput>
    OR?: Enumerable<Credencial_ExternaScalarWhereInput>
    NOT?: Enumerable<Credencial_ExternaScalarWhereInput>
    id?: IntFilter | number
    url?: StringFilter | string
    name?: StringFilter | string
    username_ext?: StringFilter | string
    password_ext?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
  }

  export type GestorCreateWithoutCredencial_ExternaInput = {
    user: UserCreateNestedOneWithoutGestorsInput
    createdAt?: Date | string
    updated_at?: Date | string
  }

  export type GestorUncheckedCreateWithoutCredencial_ExternaInput = {
    id?: number
    user_id: number
    createdAt?: Date | string
    updated_at?: Date | string
  }

  export type GestorCreateOrConnectWithoutCredencial_ExternaInput = {
    where: GestorWhereUniqueInput
    create: XOR<GestorCreateWithoutCredencial_ExternaInput, GestorUncheckedCreateWithoutCredencial_ExternaInput>
  }

  export type GestorUpsertWithWhereUniqueWithoutCredencial_ExternaInput = {
    where: GestorWhereUniqueInput
    update: XOR<GestorUpdateWithoutCredencial_ExternaInput, GestorUncheckedUpdateWithoutCredencial_ExternaInput>
    create: XOR<GestorCreateWithoutCredencial_ExternaInput, GestorUncheckedCreateWithoutCredencial_ExternaInput>
  }

  export type GestorUpdateWithWhereUniqueWithoutCredencial_ExternaInput = {
    where: GestorWhereUniqueInput
    data: XOR<GestorUpdateWithoutCredencial_ExternaInput, GestorUncheckedUpdateWithoutCredencial_ExternaInput>
  }

  export type GestorUpdateManyWithWhereWithoutCredencial_ExternaInput = {
    where: GestorScalarWhereInput
    data: XOR<GestorUpdateManyMutationInput, GestorUncheckedUpdateManyWithoutGestorsInput>
  }

  export type GestorCreateManyUserInput = {
    id?: number
    createdAt?: Date | string
    updated_at?: Date | string
  }

  export type GestorUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    credencial_Externa?: Credencial_ExternaUpdateManyWithoutGestorsNestedInput
  }

  export type GestorUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    credencial_Externa?: Credencial_ExternaUncheckedUpdateManyWithoutGestorsNestedInput
  }

  export type GestorUncheckedUpdateManyWithoutGestorsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Credencial_ExternaUpdateWithoutGestorsInput = {
    url?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username_ext?: StringFieldUpdateOperationsInput | string
    password_ext?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Credencial_ExternaUncheckedUpdateWithoutGestorsInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username_ext?: StringFieldUpdateOperationsInput | string
    password_ext?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Credencial_ExternaUncheckedUpdateManyWithoutCredencial_ExternaInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username_ext?: StringFieldUpdateOperationsInput | string
    password_ext?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GestorUpdateWithoutCredencial_ExternaInput = {
    user?: UserUpdateOneRequiredWithoutGestorsNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GestorUncheckedUpdateWithoutCredencial_ExternaInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}